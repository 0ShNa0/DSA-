class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) 
    {
        int n1=matrix.size();
        int n=matrix[0].size();
                 if(matrix[0][0] ==target ) return true;

        if(n1==1) 
            {
                int l=0;
                int r=n-1;
                    
                    while(l<=r)
                    {
                        int mid=(l+r)/2;
                        if(matrix[0][mid]==target) return true;
                        if(matrix[0][mid]>target) r=mid-1;
                        if(matrix[0][mid]<target)  l=mid+1;
                        
                    }
                    return false;
            }
            else if(n==1)
            {
                int l=0;
                int r=n1-1;
                    
                    while(l<=r)
                    {
                        int mid=(l+r)/2;
                        if(matrix[mid][0]==target) return true;
                        if(matrix[mid][0]>target) r=mid-1;
                        if(matrix[mid][0]<target)  l=mid+1;
                        
                    }
                    return false; 
            }
        for(int i=1;i<n1;i++)
        {
            
            if(matrix[i][0] ==target ) return true;
            
            
            if(matrix[i][0]>target && matrix[i-1][0]<target  ) 
            {
                
                    int l=0;
                    int r=n-1;
                    
                    while(l<=r)
                    {
                        int mid=(l+r)/2;
                        if(matrix[i-1][mid]==target) return true;
                        if(matrix[i-1][mid]>target) r=mid-1;
                        if(matrix[i-1][mid]<target)  l=mid+1;
                        
                    }
                    return false;
                
            }
            
            else if(target>matrix[n1-1][0])
            {
                int l=0;
                int r=n-1;
                    
                    while(l<=r)
                    {
                        int mid=(l+r)/2;
                        if(matrix[n-1][mid]==target) return true;
                        if(matrix[n-1][mid]>target) r=mid-1;
                        if(matrix[n-1][mid]<target)  l=mid+1;
                        
                    }
                    return false;
            }
            
        }
        return false;
    }
};